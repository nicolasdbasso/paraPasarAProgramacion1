/*
 ============================================================================
 Name        : empleados.c
 Author      : se
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdio_ext.h>
#include <stdlib.h>
#include <string.h>

#define QTY_TAM 3
#define TEXT_SIZE 51

typedef struct {
	int id;
	char name[TEXT_SIZE];
	char lastName[TEXT_SIZE];
	float salary;
	int sector;
	int isEmpty;
} Employee;

int menu();
void initEmployees(Employee lista[], int tam);
int findEmployeeById(Employee* list, int len,int id, int* position);
void captureData(char *name, char *lastName, float *salary, int *sector);
int printEmployees(Employee* list, int length);
void employeedModify (Employee employees[], int len);
int removeEmployee(Employee* list, int len);
int addEmployee(Employee *list, int len, int* countID);
int findEmployeeFree(Employee lista[], int tam, int* position);
int isValidChar(char charRecibido);

int main() {

	char continuar = 's';
	Employee employees[QTY_TAM];
	initEmployees(employees, QTY_TAM);
	int countID = 0;

	do {

		switch (menu()) {
		case 1:
			printf("\nAlta de empleado\n\n");
			addEmployee(employees, QTY_TAM, countID);
			system("pause");
			break;
		case 2:
			printf("\nModificar datos de empleado\n\n");
			employeedModify (employees, QTY_TAM);
			break;
		case 3:
			printf("\nBaja de cliente\n\n");
			removeEmployee(employees,QTY_TAM);
			break;
		case 4:
			printf("\nINFORME\n\n");
			break;
		}
		printf("\nDesea continuar 's': ");
		scanf("%c", &continuar);
	} while (continuar == 's');

	return 0;

}

void initEmployees(Employee lista[], int tam) {
	int i;
	for (i = 0; i < tam; i++) {
		lista[i].isEmpty = 0;
	}
}

int findEmployeeFree(Employee lista[], int tam, int* position) {
	int indice = -1;
	int i;
	int retorno = -1;
	for (i = 0; i < tam; i++) {
		if (lista[i].isEmpty == 0) {
			 retorno=0;
			 *position=i;
			 break;
		}
	}
	return retorno;
}

int menu() {
	int opcion;
	system("cls");
	printf("\n1--Alta cliente\n");
	printf("2--Modificar datos de cliente\n");
	printf("3--Baja de cliente\n");
	printf("4--Publicar\n");
	printf("5--Pausar publicaci칩n:\n");
	printf("5- Reanudar publicaci칩n:\n");
	printf("6--Pausar publicaci칩n:\n");
	printf("7--Imprimir Clientes:\n");
	printf("8--Imprimir publicaciones:\n");
	printf("9--Informar clientes:\n");
	printf("10--Informar publicaciones:\n");
	printf("11--SALIR\n\n");
	printf("\n Ingrese opcion: ");
	scanf("%d", &opcion);
	return opcion;
}

int printEmployees(Employee* list, int length)
{

	    int retorno=-1;
	    int i;
	    if(list!=NULL && length>=0)
	    {
	        for(i=0;i<length;i++)
	        {
	            if(list[i].isEmpty==0)
	                continue;
	            else
	                printf("\n ID: %d\n Nombre: %s\n Apelldio: %d\n Salario: %f\n Sector: %i",
	                       list[i].id,list[i].name,list[i].lastName,list[i].salary,list[i].sector);      //cambiar todos
	        }
	        retorno=0;
	    }
	    return retorno;
	}

int employeedFindID(Employee employed[], int len, int idSearch, int* position)                    //cambiar fantasma
{
    int retorno=-1;
    int i;
    if(employed!= NULL && len>=0)
    {
        for(i=0;i<len;i++)
        {
            if(employed[i].isEmpty==1)
                continue;
            else if(employed[i].id==idSearch)                                                   //cambiar campo ID
            {
                retorno=0;
                *position=i;
                break;
            }
        }
    }
    return retorno;
}

void employeedModify (Employee employees[], int len){

	    int retorno=-1;
	    int position;
	    int id;                                                                                         //cambiar si no se busca por ID
	    char opcion;
	    if(employees!=NULL && len>0)
	    {
	        Utils_getInt("\nID a modificar: ","\nError",1,sizeof(int),1,len,1,&id);         //cambiar si no se busca por ID
	        if(employeedFindID(employees,len,id,&position)==-1)                                   //cambiar si no se busca por ID
	        {
	            printf("\nNo existe este ID");                                                          //cambiar si no se busca por ID
	        }
	        else
	        {
	            do
	            {       //copiar printf de alta
	            	printEmployees(employees, QTY_TAM);
	                utn_getChar("\nModificar: 1 2 3 4 S(salir)","\nError",'A','Z',1,&opcion);
	                switch(opcion)
	                {
	                    case 'A':
	                        Utils_getInt("\n: ","\nError",1,sizeof(int),1,1,1,&employees[position].name);           //mensaje + cambiar campo varInt
	                        break;
	                    case 'B':
	                        Utils_getFloat("\n: ","\nError",1,sizeof(float),0,1,1,&employees[position].lastName);             //mensaje + cambiar campo varFloat
	                        break;
	                    case 'C':
	                        Utils_getChar("\n: ","\nError",1,TEXT_SIZE,1,employees[position].salary);                      //mensaje + cambiar campo varString
	                        break;
	                    case 'D':
	                        utn_getTexto("\n: ","\nError",1,TEXT_SIZE,1,employees[position].sector);             //mensaje + cambiar campo varLongString
	                        break;
	                    case 'S':
	                        break;
	                    default:
	                        printf("\nOpcion no valida");
	                }
	            }while(opcion!='S');
	            retorno=0;
	        }
	    }
	    return retorno;

}

int findEmployeeById(Employee* list, int len,int id, int* position)
{
    int retorno=-1;
    int i;
    if(list!= NULL && len>=0)
    {
        for(i=0;i<len;i++)
        {
            if(list[i].isEmpty==1)
                continue;
            else if(list[i].id==id)                                                   //cambiar campo varInt
            {
                retorno=0;
                *position=i;
                break;
            }
        }
    }
    return retorno;
}



int addEmployee(Employee *list, int len, int* countID) {
    int retorno=-1;
    int position;
    if(list!=NULL && len>0 && countID!=NULL)
    {
        if(findEmployeeFree(list,len,&position)==-1)                          //cambiar fantasma
        {
            printf("\nNo hay lugares vacios");
        }
        else {
			(*countID)++;
			list[position].id = *countID;                             //campo ID
			list[position].isEmpty = 1;
			Utils_getChar("getName\n: ", "\nError", 1, TEXT_SIZE, 1,
					list[position].name);    //mensaje + cambiar campo varString
			Utils_getChar("getName\n: ", "\nError", 1, TEXT_SIZE, 1,
					list[position].lastName);
			Utils_getFloat("\ngetFloat: ", "\nError", 1, sizeof(float), 0, 1, 1,
					&list[position].salary);  //mensaje + cambiar campo varFloat
			Utils_getInt("\ngetUnsignedInt: ", "\nError", 1, sizeof(int),
					1, 1, 1, &list[position].sector); //mensaje + cambiar campo varInt
			printf(
					"\n ID: %d\n Nombre: %s\n Apelldio: %d\n Salario: %f\n Sector: %i",
					list[position].id, list[position].name,
					list[position].lastName, list[position].salary,
					list[position].sector);      //cambiar todos
			retorno = 0;
		}
	}
    return retorno;
}

int fantasma_alta(Employee list[], int len, int* countID)                          //cambiar fantasma
{

}

void captureData(char *name, char *lastName, float *salary, int *sector) {

	printf("Ingrese el name: ");
	fgets(name, sizeof(name), stdin);
	__fpurge(stdin);
	printf("\nIngrese el lastname: ");
	fgets(lastName, sizeof(lastName), stdin);
	printf("\nIngrese salary ");
	scanf("%f", salary);
	printf("\nIngrese sector ");
	scanf("%d", sector);
}


int removeEmployee(Employee* list, int len)
{
    int retorno=-1;
    int position;
    int id;
    if(list!=NULL && len>0)
    {
        Utils_getInt("\nID a cancelar: ","\nError",1,sizeof(int),1,len,1,&id);          //cambiar si no se busca por ID
        if(findEmployeeById(list,len,id,&position)==-1)                                   //cambiar si no se busca por ID
        {
            printf("\nNo existe este ID");                                                          //cambiar si no se busca por ID
        }
        else
        {
        	list[position].id=0;                                                                   //cambiar campo id
        	strcpy(list[position].name,"");                                                   //cambiar campo varString
        	strcpy(list[position].lastName,"");                                               //cambiar campo varLongString
        	list[position].sector=0;                                                               //cambiar campo varInt
        	list[position].salary=0;                                                             //cambiar campo varFloat
        	list[position].isEmpty=1;                                            //cambiar campo varLongString
            retorno=0;
        }
    }
    return retorno;
}




int getString(char* msg, char* msgError, int min, int max, int* reintentos, char* resultado)
{
    int retorno=-1;
    char bufferStr[max+10];

    if(msg!=NULL && msgError!=NULL && min<=max && reintentos>=0 && resultado!=NULL)
    {
        do
        {
            printf("%s",msg);   //no poner salto de linea, se va a pasar en el mensaje por valor
            //fflush(stdin);
            fgets(bufferStr,sizeof(bufferStr),stdin);
            bufferStr[strlen(bufferStr)-1]='\0';

            if(strlen(bufferStr)>=min && strlen(bufferStr)<max)    // tama침o (max) =cantidad de elementos (strlen) + 1(\0)
            {
                strncpy(resultado,bufferStr,max);
                retorno=0;
                break;
            }
            printf("%s 1",msgError);
            (*reintentos)--;
        }
        while((*reintentos)>=0);
    }
    return retorno;
}
//------------------------------
int Utils_getChar(char* msg, char* msgError, int min, int max, int reintentos, char* resultado)
{
    int retorno=-1;
    char bufferStr[max];

    if(msg!=NULL && msgError!=NULL && min<=max && reintentos>=0 && resultado!=NULL)
    {
        do
        {
            if(!getString(msg,msgError,min,max,&reintentos,bufferStr)) //==0
            {
                if(isValidName(bufferStr)==1)
                {
                    strncpy(resultado,bufferStr,max);
                    retorno=0;
                    break;
                }
                else
                {
                    printf("%s 2",msgError);
                    reintentos--;
                }
            }
        }
        while(reintentos>=0);
    }
    return retorno;
}

int isValidName(char* stringRecibido)   //si fuera un numero podr칣a necesitar parametros para validar max y min
{
    int retorno=1;  // para las funciones isValid arranco con verdadero y cambio cuando encuentro un error
    int i;
    for(i=0;stringRecibido[i]!='\0';i++)
    {
        //printf("%d",i);
        if(stringRecibido[i]<'A' || (stringRecibido[i]>'Z' && stringRecibido[i]<'a') || stringRecibido[i]>'z')// o ((stringRecibido[i]<'A' || (stringRecibido[i]>'Z') && (stringRecibido[i]<'a' || stringRecibido[i]>'z'))
        {
            retorno=0;
            break;
        }
    }
    return retorno;
}

//-----------------------------------------
int Utils_getInt(  char* msg,char* msgError,int minSize,int maxSize,int min,int max,int reintentos,int* input)
{
    int retorno=-1;
    char bufferStr[maxSize];

    if(msg!=NULL && msgError!=NULL && minSize<maxSize && min<max && reintentos>=0 && input!=NULL)
    {
        do
        {
            if(!getString(msg,msgError,minSize,maxSize,&reintentos,bufferStr)) //==0 sin errores !0
            {
                if(Utils_validaInt(bufferStr)==1)
                {
                    *input=atoi(bufferStr);     // unsigned long int strtoul(const char *str, char **end, int base)?
                    retorno=0;
                    break;
                }
                else
                {
                    printf("%s 2",msgError);
                    reintentos--;
                }
            }
        }
        while(reintentos>=0);
    }
    return retorno;
}

int Utils_validaInt(char* stringRecibido)
{
    int retorno=1;  // para las funciones isValid arranco con verdadero y cambio cuando encuentro un error
    int i;
    for(i=0;stringRecibido[i]!='\0';i++)
    {
        if(stringRecibido[i]<'0' || stringRecibido[i]>'9')
        {
            retorno=0;
            break;
        }
    }
    return retorno;
}
//-------------------------------------------------
int utn_getSignedInt(char* msg, char* msgError, int minSize, int maxSize, int min, int max, int reintentos, int* input)
{
    int retorno=-1;
    char bufferStr[maxSize];

    if(msg!=NULL && msgError!=NULL && minSize<maxSize && min<max && reintentos>=0 && input!=NULL)
    {
        do
        {
            if(!getString(msg,msgError,minSize,maxSize,&reintentos,bufferStr)) //==0 sin errores !0
            {
                if(isValidSignedNumber(bufferStr)==1)
                {
                    *input=atoi(bufferStr); // atoi array to int
                    retorno=0;
                    break;
                }
                else
                {
                    printf("%s 2",msgError);
                    reintentos--;
                }
            }
        }
        while(reintentos>=0);
    }
    return retorno;
}

int isValidSignedNumber(char* stringRecibido)
{
    int retorno=1;  // para las funciones isValid arranco con verdadero y cambio cuando encuentro un error
    int i;
    for(i=0;stringRecibido[i]!='\0';i++)
    {
        if((stringRecibido[i]<'0' || stringRecibido[i]>'9') && (stringRecibido[0]!='+' && stringRecibido[0]!='-'))
        {
            retorno=0;
            break;
        }
    }
    return retorno;
}
//*******************************************************
int Utils_getFloat(char* msg, char* msgError, int minSize, int maxSize, int min, int max, int reintentos, float* input)
{
    int retorno=-1;
    char bufferStr[maxSize];

    if(msg!=NULL && msgError!=NULL && minSize<maxSize && min<max && reintentos>=0 && input!=NULL)
    {
        do
        {
            if(!getString(msg,msgError,minSize,maxSize,&reintentos,bufferStr)) //==0 sin errores !0
            {
                if(Utils_validaFloat(bufferStr)==1)
                {
                    *input=atof(bufferStr); // atof array to float
                    retorno=0;
                    break;
                }
                else
                {
                    printf("%s 2",msgError);
                    reintentos--;
                }
            }
        }
        while(reintentos>=0);
    }
    return retorno;
}

int Utils_validaFloat(char* stringRecibido)
{
    int retorno=1;  // para las funciones isValid arranco con verdadero y cambio cuando encuentro un error
    int i;
    for(i=0;stringRecibido[i]!='\0';i++)
    {
        if((stringRecibido[i]<'0' || stringRecibido[i]>'9') && (stringRecibido[i]!='.'))
        {
            retorno=0;
            break;
        }
    }
    return retorno;
}
//*************************************************************
int utn_getTelefono(char* msg, char* msgError, int minSize, int maxSize, int min, int max, int reintentos, char* input)
{
    int retorno=-1;
    char bufferStr[maxSize];

    if(msg!=NULL && msgError!=NULL && minSize<maxSize && min<max && reintentos>=0 && input!=NULL)
    {
        do
        {
            if(!getString(msg,msgError,minSize,maxSize,&reintentos,bufferStr)) //==0 sin errores !0
            {
                if(isValidTelephone(bufferStr)==1)
                {
                    strncpy(input,bufferStr,maxSize);
                    retorno=0;
                    break;
                }
                else
                {
                    printf("%s 2",msgError);
                    reintentos--;
                }
            }
        }
        while(reintentos>=0);
    }
    return retorno;
}

int isValidTelephone(char* stringRecibido)
{
    int retorno=1;  // para las funciones isValid arranco con verdadero y cambio cuando encuentro un error
    int i;
    for(i=0;stringRecibido[i]!='\0';i++)
    {
        if((stringRecibido[i]<'0' || stringRecibido[i]>'9') && (stringRecibido[i]!='-' || stringRecibido[i]!=' '))
        {
            retorno=0;
            break;
        }
    }
    return retorno;
}
//***************************************
int utn_getDNI(char* msg, char* msgError, int minSize, int maxSize, int reintentos, char* input)
{
    maxSize=11; //con puntos
    minSize=8;  // sin puntos
    int retorno=-1;
    char bufferStr[maxSize];

    if(msg!=NULL && msgError!=NULL && minSize<maxSize && reintentos>=0 && input!=NULL)
    {
        do
        {
            if(!getString(msg,msgError,minSize,maxSize,&reintentos,bufferStr)) //==0 sin errores !0
            {
                if(isValidDNI(bufferStr)==1)
                {
                    strncpy(input,bufferStr,maxSize);
                    retorno=0;
                    break;
                }
                else
                {
                    printf("%s 2",msgError);
                    reintentos--;
                }
            }
        }
        while(reintentos>=0);
    }
    return retorno;
}

int isValidDNI(char* stringRecibido)
{
    int retorno=1;  // para las funciones isValid arranco con verdadero y cambio cuando encuentro un error
    int i;
    for(i=0;stringRecibido[i]!='\0';i++)
    {
        if((stringRecibido[i]<'0' || stringRecibido[i]>'9') && (stringRecibido[i]!='.'))
        {
            retorno=0;
            break;
        }
    }
    return retorno;
}

//***************************************
int utn_getCUIT(char* msg, char* msgError, int reintentos, char* input)
{
    int maxSize=14; //con guiones 13 elementos
    int minSize=11;  // sin puntos
    int retorno=-1;
    char bufferStr[maxSize];

    if(msg!=NULL && msgError!=NULL && minSize<maxSize && reintentos>=0 && input!=NULL)
    {
        do
        {
            if(!getString(msg,msgError,minSize,maxSize,&reintentos,bufferStr)) //==0 sin errores !0
            {
                if(isValidCUIT(bufferStr)==1)
                {
                    strncpy(input,bufferStr,maxSize);
                    retorno=0;
                    break;
                }
                else
                {
                    printf("%s 2",msgError);
                    reintentos--;
                }
            }
        }
        while(reintentos>=0);
    }
    return retorno;
}

int isValidCUIT(char* stringRecibido)
{
    int retorno=1;  // para las funciones isValid arranco con verdadero y cambio cuando encuentro un error
    int i;
    int j;
    char buffer[14];
    strncpy(buffer,stringRecibido,14);

    for(i=0;buffer[i]!='\0';i++)
    {
        if((buffer[i]<'0' || buffer[i]>'9') && (buffer[i]!='-')) // chequeo que solo sean numeros o -
        {
            retorno=0;
            break;
        }

        if(buffer[i]=='-')  //elimino los -
        {
            for(j=i;buffer[j]!='\0';j++)
            {
                strncpy(&buffer[j],&buffer[j+1],1);
            }
        }
    }

    int digitos[10]={2,3,4,5,6,7,2,3,4,5};
    int acumulado = 0;
    int verificador;

    for(i=0;i < strlen(buffer-1); i++)
    {
        acumulado+=buffer[i]*digitos[i];
    }

    verificador=11-(acumulado%11);
	if(verificador == 11)
	{
		verificador = 0;
	}

	if(buffer[11]!=verificador)
    {
        retorno=0;
    }

    //if(stringRecibido[2]!='-' || stringRecibido[11]!='-' || stringRecibido[0]!='2' || stringRecibido[1]!='0' || stringRecibido[1]!='3' || stringRecibido[1]!='4' || stringRecibido[1]!='7')
    return retorno;
}

//*************************************************************
int utn_getEmail(char* msg, char* msgError, int minSize, int maxSize, int reintentos, char* input)
{
    int retorno=-1;
    char bufferStr[maxSize];

    if(msg!=NULL && msgError!=NULL && minSize<maxSize && reintentos>=0 && input!=NULL)
    {
        do
        {
            if(!getString(msg,msgError,minSize,maxSize,&reintentos,bufferStr)) //==0 sin errores !0
            {
                if(isValidEmail(bufferStr)==1)
                {
                    strncpy(input,bufferStr,maxSize);
                    retorno=0;
                    break;
                }
                else
                {
                    printf("%s 2",msgError);
                    reintentos--;
                }
            }
        }
        while(reintentos>=0);
    }
    return retorno;
}

int isValidEmail(char* stringRecibido)
{
    int retorno=1;  // para las funciones isValid arranco con verdadero y cambio cuando encuentro un error
    int i;
    for(i=0;stringRecibido[i]!='\0';i++)
    {
        if((stringRecibido[i]<'-' && stringRecibido[i]!='+') || (stringRecibido[i]>'9' && stringRecibido[i]<'@') ||
           (stringRecibido[i]>'Z' && stringRecibido[i]!='_' && stringRecibido[i]<'a')|| stringRecibido[i]>'z')
        {
            retorno=0;
            break;
        }
    }
    return retorno;
}

//*************************************************************
int utn_getTexto(char* msg, char* msgError, int minSize, int maxSize, int reintentos, char* input)
{
    int retorno=-1;
    char bufferStr[maxSize];

    if(msg!=NULL && msgError!=NULL && minSize<maxSize && reintentos>=0 && input!=NULL)
    {
        do
        {
            if(!getString(msg,msgError,minSize,maxSize,&reintentos,bufferStr)) //==0 sin errores !0
            {
                if(isValidTexto(bufferStr)==1)
                {
                    strncpy(input,bufferStr,maxSize);
                    retorno=0;
                    break;
                }
                else
                {
                    printf("%s 2",msgError);
                    reintentos--;
                }
            }
        }
        while(reintentos>=0);
    }
    return retorno;
}

int isValidTexto(char* stringRecibido)
{
    int retorno=1;  // para las funciones isValid arranco con verdadero y cambio cuando encuentro un error
    int i;
    for(i=0;stringRecibido[i]!='\0';i++)
    {
        if(stringRecibido[i]<' ' || stringRecibido[i]>'z')
        {
            retorno=0;
            break;
        }
    }
    return retorno;
}

//*************************************************************
int utn_getAlfanumerico(char* msg, char* msgError, int minSize, int maxSize, int reintentos, char* input)
{
    int retorno=-1;
    char bufferStr[maxSize];

    if(msg!=NULL && msgError!=NULL && minSize<maxSize && reintentos>=0 && input!=NULL)
    {
        do
        {
            if(!getString(msg,msgError,minSize,maxSize,&reintentos,bufferStr)) //==0 sin errores !0
            {
                if(isValidAlphanumeric(bufferStr)==1)
                {
                    strncpy(input,bufferStr,maxSize);
                    retorno=0;
                    break;
                }
                else
                {
                    printf("%s 2",msgError);
                    reintentos--;
                }
            }
        }
        while(reintentos>=0);
    }
    return retorno;
}

int isValidAlphanumeric(char* stringRecibido)
{
    int retorno=1;  // para las funciones isValid arranco con verdadero y cambio cuando encuentro un error
    int i;
    for(i=0;stringRecibido[i]!='\0';i++)
    {
        if(stringRecibido[i]<'0' || (stringRecibido[i]>'9' && stringRecibido[i]<'A') || (stringRecibido[i]>'Z' && stringRecibido[i]<'a') || stringRecibido[i]>'z' )
        {
            retorno=0;
            break;
        }
    }
    return retorno;
}

int utn_getChar(char* msg, char* msgError, int min, int max, int reintentos, char* resultado)
{
    int retorno=-1;
    char bufferChar[256];

    if(msg!=NULL && msgError!=NULL && min<=max && reintentos>=0 && resultado!=NULL)
    {
        do
        {
            if(!getString(msg,msgError,1,3,&reintentos,bufferChar)) //==0
            {
                if(isValidChar(bufferChar[0])==1)
                {
                    printf("OK");
                    *resultado=bufferChar[0];
                    retorno=0;
                    break;
                }
                else
                {
                    printf("%s 2",msgError);
                    reintentos--;
                }
            }
        }
        while(reintentos>=0);
    }
    return retorno;
}

int isValidChar(char charRecibido)
{
    int retorno=1;  // para las funciones isValid arranco con verdadero y cambio cuando encuentro un error
    if(charRecibido<'A' || (charRecibido>'Z' && charRecibido<'a') || charRecibido>'z')
        retorno=0;
    return retorno;
}
