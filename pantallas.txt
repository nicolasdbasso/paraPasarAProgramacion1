/*
 ============================================================================
 Name        : pantallas.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdio_ext.h>
#include <stdlib.h>
#include <string.h>

#define CANTIDAD_MAX_PANTALLAS 100
#define CANTIDAD_MAX_CLIENTES 1000
#define MAX_CHAR 51

	typedef struct {
		int id;
		char tipo[MAX_CHAR];
		char direccion[MAX_CHAR];
		int precio;
		int isEmpty;
	} Pantallas;

	typedef struct {
		int idPublicacion;
		int idPantalla;
		int cuit;
		char nombreArchivo[MAX_CHAR];
		int cantidadDias;
		int isEmpty;
	} Publicidad;

int main(void) {





	char continuar = 's';
	Pantallas pantallas[CANTIDAD_MAX_PANTALLAS];
	Publicidad publicidades[CANTIDAD_MAX_CLIENTES];
	inicializarPantallas(pantallas, CANTIDAD_MAX_PANTALLAS);
	inicializarPublicidades(publicidades, CANTIDAD_MAX_CLIENTES);
	int countID = 0;

	do {

		switch (menu()) {
		case 1:
			printf("\nAlta de pantalla\n\n");
			agregarPantalla(pantallas, CANTIDAD_MAX_PANTALLAS, countID);
			system("pause");
			break;
		case 2:
			printf("\nModificar datos de pantalla\n\n");
			//modificarPantalla(pantallas, sizeof(pantallas), publicidades);
			break;
		case 3:
			printf("\nBaja de pantalla\n\n");
			removePantalla(pantallas,sizeof(pantallas));
			break;
		case 4:
			printf("\nINFORME\n\n");
			break;
		}
		printf("\nDesea continuar 's': ");
		scanf("%c", &continuar);
	} while (continuar == 's');

	return 0;





}

int buscaPantallaPorId(Pantallas* list, int len,int id, int* position)
{
    int retorno=-1;
    int i;
    if(list!= NULL && len>=0)
    {
        for(i=0;i<len;i++)
        {
            if(list[i].isEmpty==1)
                continue;
            else if(list[i].id==id)                                                   //cambiar campo varInt
            {
                retorno=0;
                *position=i;
                break;
            }
        }
    }
    return retorno;
}


int menu() {
	int opcion;
	system("cls");
	printf("\n1--Alta pantalla\n");
	printf("2--Modificar datos de una pantalla\n");
	printf("3--Baja de una pantalla\n");
	printf("4--Contratar una publicacion\n");
	printf("5--Modificar condiciones de publicación:\n");
	printf("6--Cancelar contratación:\n");
	printf("7--Consulta facturación:\n");
	printf("8--Listar contrataciones:\n");
	printf("9--Listar​ ​ pantallas:\n");
	printf("10--Informar publicaciones:\n");
	printf("11--SALIR\n\n");
	printf("\n Ingrese opcion: ");
	scanf("%d", &opcion);
	return opcion;
}

int buscarPantallaLibre(Pantallas list[], int tam, int* position) {
	int indice = -1;
	int i;
	int retorno = -1;
	for (i = 0; i < tam; i++) {
		if (list[i].isEmpty == 0) {
			 retorno=0;
			 *position=i;
			 break;
		}
	}
	return retorno;
}

int Utils_validaInt(char* stringRecibido)
{
    int retorno=1;  // para las funciones isValid arranco con verdadero y cambio cuando encuentro un error
    int i;
    for(i=0;stringRecibido[i]!='\0';i++)
    {
        if(stringRecibido[i]<'0' || stringRecibido[i]>'9')
        {
            retorno=0;
            break;
        }
    }
    return retorno;
}

int Utils_getInt(  char* msg,char* msgError,int minSize,int maxSize,int min,int max,int reintentos,int* input)
{
    int retorno=-1;
    char bufferStr[maxSize];

    if(msg!=NULL && msgError!=NULL && minSize<maxSize && min<max && reintentos>=0 && input!=NULL)
    {
        do
        {
            if(!getString(msg,msgError,minSize,maxSize,&reintentos,bufferStr)) //==0 sin errores !0
            {
                if(Utils_validaInt(bufferStr)==1)
                {
                    *input=atoi(bufferStr);     // unsigned long int strtoul(const char *str, char **end, int base)?
                    retorno=0;
                    break;
                }
                else
                {
                    printf("%s 2",msgError);
                    reintentos--;
                }
            }
        }
        while(reintentos>=0);
    }
    return retorno;
}



int agregarPantalla(Pantallas *list, int len, int *countID) {
	int retorno = -1;
	int position;
	if (list != NULL && len > 0 && countID != NULL) {
		if (buscarPantallaLibre(list, len, &position) == -1) //cambiar fantasma
				{
			printf("\nNo hay lugares vacios");
		}

		else {
			(*countID)++;
			list[position].id = *countID;                         //campo ID
			list[position].isEmpty = 1;
			Utils_getChar("Tipo\n: ", "\nError", 1, MAX_CHAR, 1,
					list[position].tipo); //mensaje + cambiar campo varString
			Utils_getChar("DIreccion\n: ", "\nError", 1, MAX_CHAR, 1,
					list[position].direccion);
			Utils_getInt("\nPrecio: ", "\nError", 1, sizeof(int), 1, 1, 1,
					&list[position].precio); //mensaje + cambiar campo varInt
			printf(
					"\n ID: %d\n Tipo: %s\n Direccion: %s\n Salario: %f\n Precio por dia: %i",
					list[position].id, list[position].tipo,
					list[position].direccion, list[position].precio); //cambiar todos
			retorno = 0;
		}
	}
	return retorno;
}




int removePantalla(Pantallas* list, int len, Publicidad* publicidades)
{
	int idPantalla;
    int retorno=-1;
    int position;
    int id;
    if(list!=NULL && len>0)
    {
        Utils_getInt("\nID a cancelar: ","\nError",1,sizeof(int),1,len,1,&id);          //cambiar si no se busca por ID
        if(buscaPantallaPorId(list,len,id,&position)==-1)                                   //cambiar si no se busca por ID
        {
            printf("\nNo existe este ID");                                                          //cambiar si no se busca por ID
        }
        else
        {
        	idPantalla = list[position].id;
        	list[position].id=0;                                                                   //cambiar campo id
        	strcpy(list[position].tipo,"");                                                   //cambiar campo varString
        	strcpy(list[position].direccion,"");                                               //cambiar campo varLongString
        	list[position].precio=0;
        	list[position].isEmpty = 0;
        	//cambiar campo varInt
        	if(removePublicidad(publicidades, sizeof(publicidades), idPantalla) == 0){
        		retorno=0;
        	}

        }
    }
    return retorno;
}

int removePublicidad(Publicidad* list, int len){
    int retorno=-1;
    int position;
    int id;
    if(list!=NULL && len>0)
    {
        Utils_getInt("\nID a cancelar: ","\nError",1,sizeof(int),1,len,1,&id);          //cambiar si no se busca por ID
        if(buscaPantallaPorId(list,len,id,&position)==-1)                                   //cambiar si no se busca por ID
        {
            printf("\nNo existe este ID");                                                          //cambiar si no se busca por ID
        }
        else
        {
        	list[position].idPublicacion=0;                                                                   //cambiar campo id
        	strcpy(list[position].nombreArchivo,"");                                                   //cambiar campo varString
        	list[position].cuit=0;                                                               //cambiar campo varInt
        	list[position].cantidadDias=0;                                                               //cambiar campo varInt
        	list[position].idPantalla=0;                                                              //cambiar campo varInt
        	list[position].isEmpty = 0;
        	retorno=0;

        		int idPublicacion;
        		int idPantalla;
        		int cuit;
        		char nombreArchivo[MAX_CHAR];
        		int cantidadDias;
        		int isEmpty;

        }
    }
    return retorno;
}

int getString(char* msg, char* msgError, int min, int max, int* reintentos, char* resultado)
{
    int retorno=-1;
    char bufferStr[max+10];

    if(msg!=NULL && msgError!=NULL && min<=max && reintentos>=0 && resultado!=NULL)
    {
        do
        {
            printf("%s",msg);   //no poner salto de linea, se va a pasar en el mensaje por valor
            //fflush(stdin);
            fgets(bufferStr,sizeof(bufferStr),stdin);
            bufferStr[strlen(bufferStr)-1]='\0';

            if(strlen(bufferStr)>=min && strlen(bufferStr)<max)    // tamaño (max) =cantidad de elementos (strlen) + 1(\0)
            {
                strncpy(resultado,bufferStr,max);
                retorno=0;
                break;
            }
            printf("%s 1",msgError);
            (*reintentos)--;
        }
        while((*reintentos)>=0);
    }
    return retorno;
}

int Utils_getChar(char* msg, char* msgError, int min, int max, int reintentos, char* resultado)
{
    int retorno=-1;
    char bufferStr[max];

    if(msg!=NULL && msgError!=NULL && min<=max && reintentos>=0 && resultado!=NULL)
    {
        do
        {
            if(!getString(msg,msgError,min,max,&reintentos,bufferStr)) //==0
            {
                if(isValidName(bufferStr)==1)
                {
                    strncpy(resultado,bufferStr,max);
                    retorno=0;
                    break;
                }
                else
                {
                    printf("%s 2",msgError);
                    reintentos--;
                }
            }
        }
        while(reintentos>=0);
    }
    return retorno;
}

int isValidName(char* stringRecibido)   //si fuera un numero podrìa necesitar parametros para validar max y min
{
    int retorno=1;  // para las funciones isValid arranco con verdadero y cambio cuando encuentro un error
    int i;
    for(i=0;stringRecibido[i]!='\0';i++)
    {
        //printf("%d",i);
        if(stringRecibido[i]<'A' || (stringRecibido[i]>'Z' && stringRecibido[i]<'a') || stringRecibido[i]>'z')// o ((stringRecibido[i]<'A' || (stringRecibido[i]>'Z') && (stringRecibido[i]<'a' || stringRecibido[i]>'z'))
        {
            retorno=0;
            break;
        }
    }
    return retorno;
}

void inicializarPantallas(Pantallas* list, int tam) {
	int i;
	for (i = 0; i < tam; i++) {
		list[i].isEmpty = 0;
	}
}

void inicializarPublicidades(Publicidad* list, int tam) {
	int i;
	for (i = 0; i < tam; i++) {
		list[i].isEmpty = 0;
	}
}
